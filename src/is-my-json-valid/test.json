TAP version 13
# json-schema-test-suite additionalItems as schema
ok 1 additional items match schema
ok 2 additional items do not match schema
# json-schema-test-suite items is schema, no additionalItems
ok 3 all items match schema
# json-schema-test-suite array of items with no additionalItems
ok 4 no additional items present
ok 5 additional items are not permitted
# json-schema-test-suite additionalItems as false without items
ok 6 items defaults to empty schema so everything is valid
ok 7 ignores non-arrays
# json-schema-test-suite additionalItems are allowed by default
ok 8 only the first item is validated
# json-schema-test-suite additionalProperties being false does not allow other properties
ok 9 no additional properties is valid
ok 10 an additional property is invalid
ok 11 ignores non-objects
ok 12 patternProperties are not additional properties
# json-schema-test-suite additionalProperties allows a schema which should validate
ok 13 no additional properties is valid
ok 14 an additional valid property is valid
ok 15 an additional invalid property is invalid
# json-schema-test-suite additionalProperties can exist by itself
ok 16 an additional valid property is valid
ok 17 an additional invalid property is invalid
# json-schema-test-suite additionalProperties are allowed by default
ok 18 additional properties are allowed
# json-schema-test-suite allOf
ok 19 allOf
ok 20 mismatch second
ok 21 mismatch first
ok 22 wrong type
# json-schema-test-suite allOf with base schema
ok 23 valid
ok 24 mismatch base schema
ok 25 mismatch first allOf
ok 26 mismatch second allOf
ok 27 mismatch both
# json-schema-test-suite allOf simple types
ok 28 valid
ok 29 mismatch one
# json-schema-test-suite anyOf
ok 30 first anyOf valid
ok 31 second anyOf valid
ok 32 both anyOf valid
ok 33 neither anyOf valid
# json-schema-test-suite anyOf with base schema
ok 34 mismatch base schema
ok 35 one anyOf valid
ok 36 both anyOf invalid
# json-schema-test-suite integer
ok 37 a bignum is an integer
# json-schema-test-suite number
ok 38 a bignum is a number
# json-schema-test-suite integer
ok 39 a negative bignum is an integer
# json-schema-test-suite number
ok 40 a negative bignum is a number
# json-schema-test-suite string
ok 41 a bignum is not a string
# json-schema-test-suite integer comparison
ok 42 comparison works for high numbers
# json-schema-test-suite float comparison with high precision
ok 43 comparison works for high numbers
# json-schema-test-suite integer comparison
ok 44 comparison works for very negative numbers
# json-schema-test-suite float comparison with high precision on negative numbers
ok 45 comparison works for very negative numbers
# json-schema-test-suite invalid type for default
ok 46 valid when property is specified
ok 47 still valid when the invalid default is used
# json-schema-test-suite invalid string value for default
ok 48 valid when property is specified
ok 49 still valid when the invalid default is used
# json-schema-test-suite dependencies
ok 50 neither
ok 51 nondependant
ok 52 with dependency
ok 53 missing dependency
ok 54 ignores non-objects
# json-schema-test-suite multiple dependencies
ok 55 neither
ok 56 nondependants
ok 57 with dependencies
ok 58 missing dependency
ok 59 missing other dependency
ok 60 missing both dependencies
# json-schema-test-suite multiple dependencies subschema
ok 61 valid
ok 62 no dependency
ok 63 wrong type
ok 64 wrong type other
ok 65 wrong type both
# json-schema-test-suite simple enum validation
ok 66 one of the enum is valid
ok 67 something else is invalid
# json-schema-test-suite heterogeneous enum validation
ok 68 one of the enum is valid
ok 69 something else is invalid
ok 70 objects are deep compared
# json-schema-test-suite enums in properties
ok 71 both properties are valid
ok 72 missing optional property is valid
ok 73 missing required property is invalid
ok 74 missing all properties is invalid
# json-schema-test-suite validation of date-time strings
ok 75 a valid date-time string
ok 76 an invalid date-time string
ok 77 only RFC3339 not all of ISO 8601 are valid
# json-schema-test-suite validation of URIs
ok 78 a valid URI
ok 79 an invalid URI
ok 80 an invalid URI though valid URI reference
# json-schema-test-suite validation of e-mail addresses
ok 81 a valid e-mail address
ok 82 an invalid e-mail address
# json-schema-test-suite validation of IP addresses
ok 83 a valid IP address
ok 84 an IP address with too many components
ok 85 an IP address with out-of-range values
ok 86 an IP address without 4 components
ok 87 an IP address as an integer
# json-schema-test-suite validation of IPv6 addresses
ok 88 a valid IPv6 address
ok 89 an IPv6 address with out-of-range values
ok 90 an IPv6 address with too many components
ok 91 an IPv6 address containing illegal characters
# json-schema-test-suite validation of host names
ok 92 a valid host name
ok 93 a host name starting with an illegal character
ok 94 a host name containing illegal characters
ok 95 a host name with a component too long
# json-schema-test-suite a schema given for items
ok 96 valid items
ok 97 wrong type of items
ok 98 ignores non-arrays
# json-schema-test-suite an array of schemas for items
ok 99 correct types
ok 100 wrong types
# json-schema-test-suite maximum validation
ok 101 below the maximum is valid
ok 102 above the maximum is invalid
ok 103 ignores non-numbers
# json-schema-test-suite exclusiveMaximum validation
ok 104 below the maximum is still valid
ok 105 boundary point is invalid
# json-schema-test-suite maxItems validation
ok 106 shorter is valid
ok 107 exact length is valid
ok 108 too long is invalid
ok 109 ignores non-arrays
# json-schema-test-suite maxLength validation
ok 110 shorter is valid
ok 111 exact length is valid
ok 112 too long is invalid
ok 113 ignores non-strings
# json-schema-test-suite maxProperties validation
ok 114 shorter is valid
ok 115 exact length is valid
ok 116 too long is invalid
ok 117 ignores non-objects
# json-schema-test-suite minimum validation
ok 118 above the minimum is valid
ok 119 below the minimum is invalid
ok 120 ignores non-numbers
# json-schema-test-suite exclusiveMinimum validation
ok 121 above the minimum is still valid
ok 122 boundary point is invalid
# json-schema-test-suite minItems validation
ok 123 longer is valid
ok 124 exact length is valid
ok 125 too short is invalid
ok 126 ignores non-arrays
# json-schema-test-suite minLength validation
ok 127 longer is valid
ok 128 exact length is valid
ok 129 too short is invalid
ok 130 ignores non-strings
# json-schema-test-suite minProperties validation
ok 131 longer is valid
ok 132 exact length is valid
ok 133 too short is invalid
ok 134 ignores non-objects
# json-schema-test-suite by int
ok 135 int by int
ok 136 int by int fail
ok 137 ignores non-numbers
# json-schema-test-suite by number
ok 138 zero is multiple of anything
ok 139 4.5 is multiple of 1.5
ok 140 35 is not multiple of 1.5
# json-schema-test-suite by small number
ok 141 0.0075 is multiple of 0.0001
ok 142 0.00751 is not multiple of 0.0001
# json-schema-test-suite by decimal number where floating point precision is wrong
ok 143 Number 2 is multiple of 0.01
ok 144 Number 2.1 is multiple of 0.01
ok 145 Number 2.2 is multiple of 0.01
ok 146 Number 2.3 is multiple of 0.01
ok 147 Number 2.4 is multiple of 0.01
ok 148 Number 1.211 is not multiple of 0.01
# json-schema-test-suite not
ok 149 allowed
ok 150 disallowed
# json-schema-test-suite not multiple types
ok 151 valid
ok 152 mismatch
ok 153 other mismatch
# json-schema-test-suite not more complex schema
ok 154 match
ok 155 other match
ok 156 mismatch
# json-schema-test-suite forbidden property
ok 157 property present
ok 158 property absent
# json-schema-test-suite validation of null and format
ok 159 a valid date-time string
ok 160 allow null
# json-schema-test-suite multiple types of null and object containing properties
ok 161 null is valid
# json-schema-test-suite oneOf
ok 162 first oneOf valid
ok 163 second oneOf valid
ok 164 both oneOf valid
ok 165 neither oneOf valid
# json-schema-test-suite oneOf with base schema
ok 166 mismatch base schema
ok 167 one oneOf valid
ok 168 both oneOf valid
# json-schema-test-suite pattern validation
ok 169 a matching pattern is valid
ok 170 a non-matching pattern is invalid
ok 171 ignores non-strings
# json-schema-test-suite patternProperties validates properties matching a regex
ok 172 a single valid match is valid
ok 173 multiple valid matches is valid
ok 174 a single invalid match is invalid
ok 175 multiple invalid matches is invalid
ok 176 ignores non-objects
# json-schema-test-suite multiple simultaneous patternProperties are validated
ok 177 a single valid match is valid
ok 178 a simultaneous match is valid
ok 179 multiple matches is valid
ok 180 an invalid due to one is invalid
ok 181 an invalid due to the other is invalid
ok 182 an invalid due to both is invalid
# json-schema-test-suite regexes are not anchored by default and are case sensitive
ok 183 non recognized members are ignored
ok 184 recognized members are accounted for
ok 185 regexes are case sensitive
ok 186 regexes are case sensitive, 2
# json-schema-test-suite object properties validation
ok 187 both properties present and valid is valid
ok 188 one property invalid is invalid
ok 189 both properties invalid is invalid
ok 190 doesn't invalidate other properties
ok 191 ignores non-objects
# json-schema-test-suite properties, patternProperties, additionalProperties interaction
ok 192 property validates property
ok 193 property invalidates property
ok 194 patternProperty invalidates property
ok 195 patternProperty validates nonproperty
ok 196 patternProperty invalidates nonproperty
ok 197 additionalProperty ignores property
ok 198 additionalProperty validates others
ok 199 additionalProperty invalidates others
# json-schema-test-suite root pointer ref
ptr: 
ptr: 
ok 200 match
ok 201 recursive match
ok 202 mismatch
ok 203 recursive mismatch
# json-schema-test-suite relative pointer ref to object
ptr: /properties/foo
ok 204 match
ok 205 mismatch
# json-schema-test-suite relative pointer ref to array
ptr: /items/0
ok 206 match array
ok 207 mismatch array
# json-schema-test-suite escaped pointer ref
ptr: /tilda~0field
ptr: /slash~1field
ptr: /percent%25field
ok 208 slash
ok 209 tilda
ok 210 percent
# json-schema-test-suite nested refs
ptr: /definitions/c
ptr: /definitions/b
ptr: /definitions/a
ok 211 nested ref valid
ok 212 nested ref invalid
# json-schema-test-suite required validation
ok 213 present required property is valid
ok 214 non-present required property is invalid
# json-schema-test-suite required default validation
ok 215 not required by default
# json-schema-test-suite integer type matches integers
ok 216 an integer is an integer
ok 217 a float is not an integer
ok 218 a string is not an integer
ok 219 an object is not an integer
ok 220 an array is not an integer
ok 221 a boolean is not an integer
ok 222 null is not an integer
# json-schema-test-suite number type matches numbers
ok 223 an integer is a number
ok 224 a float is a number
ok 225 a string is not a number
ok 226 an object is not a number
ok 227 an array is not a number
ok 228 a boolean is not a number
ok 229 null is not a number
# json-schema-test-suite string type matches strings
ok 230 1 is not a string
ok 231 a float is not a string
ok 232 a string is a string
ok 233 an object is not a string
ok 234 an array is not a string
ok 235 a boolean is not a string
ok 236 null is not a string
# json-schema-test-suite object type matches objects
ok 237 an integer is not an object
ok 238 a float is not an object
ok 239 a string is not an object
ok 240 an object is an object
ok 241 an array is not an object
ok 242 a boolean is not an object
ok 243 null is not an object
# json-schema-test-suite array type matches arrays
ok 244 an integer is not an array
ok 245 a float is not an array
ok 246 a string is not an array
ok 247 an object is not an array
ok 248 an array is not an array
ok 249 a boolean is not an array
ok 250 null is not an array
# json-schema-test-suite boolean type matches booleans
ok 251 an integer is not a boolean
ok 252 a float is not a boolean
ok 253 a string is not a boolean
ok 254 an object is not a boolean
ok 255 an array is not a boolean
ok 256 a boolean is not a boolean
ok 257 null is not a boolean
# json-schema-test-suite null type matches only the null object
ok 258 an integer is not null
ok 259 a float is not null
ok 260 a string is not null
ok 261 an object is not null
ok 262 an array is not null
ok 263 a boolean is not null
ok 264 null is null
# json-schema-test-suite multiple types can be specified in an array
ok 265 an integer is valid
ok 266 a string is valid
ok 267 a float is invalid
ok 268 an object is invalid
ok 269 an array is invalid
ok 270 a boolean is invalid
ok 271 null is invalid
# json-schema-test-suite uniqueItems validation
ok 272 unique array of integers is valid
ok 273 non-unique array of integers is invalid
ok 274 numbers are unique if mathematically unequal
ok 275 unique array of objects is valid
ok 276 non-unique array of objects is invalid
ok 277 unique array of nested objects is valid
ok 278 non-unique array of nested objects is invalid
ok 279 unique array of arrays is valid
ok 280 non-unique array of arrays is invalid
ok 281 1 and true are unique
ok 282 0 and false are unique
ok 283 unique heterogeneous types are valid
ok 284 non-unique heterogeneous types are invalid
# simple
ok 285 should be valid
ok 286 should be invalid
ok 287 should be invalid
# data is undefined
ok 288 should be falsy
ok 289 should be falsy
# advanced
ok 290 should be valid
ok 291 should be invalid
# greedy/false
ok 292 should be invalid
ok 293 should be equal
ok 294 should be equal
ok 295 should be equal
ok 296 should be equal
ok 297 should be equal
ok 298 should be invalid
ok 299 should be equal
ok 300 should be equal
ok 301 should be equal
ok 302 should be invalid
ok 303 should be equal
ok 304 should be equal
ok 305 should be equal
# greedy/true
ok 306 should be invalid
ok 307 should be equal
ok 308 should be equal
ok 309 should be equal
ok 310 should be equal
ok 311 should be equal
ok 312 should be invalid
ok 313 should be equal
ok 314 should be equal
ok 315 should be equal
ok 316 should be equal
ok 317 should be equal
ok 318 should be invalid
ok 319 should be equal
ok 320 should be equal
ok 321 should be equal
ok 322 should be invalid
# additional props
ok 323 should be truthy
ok 324 should be falsy
ok 325 should output the property not allowed in verbose mode
ok 326 error object should contain the type
# array
ok 327 wrong type
ok 328 is required
ok 329 should be truthy
# nested array
ok 330 is required
ok 331 should be truthy
ok 332 should be falsy
# enum
ok 333 is required
ok 334 should be truthy
ok 335 should be falsy
# minimum/maximum
ok 336 should be falsy
ok 337 should be truthy
ok 338 should be falsy
# exclusiveMinimum/exclusiveMaximum
ok 339 should be falsy
ok 340 should be truthy
ok 341 should be falsy
ok 342 should be truthy
# minimum/maximum number type
ok 343 should be falsy
ok 344 should be falsy
ok 345 should be truthy
ok 346 should be truthy
ok 347 should be truthy
ok 348 should be falsy
# custom format
ok 349 not as
ok 350 not as
ok 351 not as
ok 352 as
ok 353 as
# custom format function
ok 354 not as
ok 355 not as
ok 356 not as
ok 357 as
ok 358 as
# do not mutate schema
ok 359 did not mutate
# #toJSON()
ok 360 should return original schema
# external schemas
ptr: ext
ok 361 is a string
ok 362 not a string
# external schema URIs
ptr: http://example.com/schemas/schemaURIs
ok 363 is a string
ok 364 not a string
# top-level external schema
ptr: definitions.json#/string
ptr: definitions.json#/sex
ok 365 is an object
ok 366 recognizes external schema
ok 367 recognizes external schema
# nested required array decl
ok 368 should be valid
ok 369 should not be valid
ok 370 should output the missing field
# verbose mode
ok 371 should be valid
ok 372 should not be valid
ok 373 error object should contain the invalid value
ok 374 error object should contain the type
# additional props in verbose mode
ok 375 should output the path to the additional prop in the error
# Date.now() is an integer
ok 376 is integer
# field shows item index in arrays
ok 377 should output the field with specific index of failing item in the error

1..377
# tests 377
# pass  377

# ok

